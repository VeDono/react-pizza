import qs from 'qs'
import { useNavigate } from 'react-router-dom'
import { useSelector } from 'react-redux'
import React, { useEffect, useRef } from 'react'
// Outside imports

import { listItems } from '../components/Sort'
import {
  setCategoryId,
  setFilters,
  selectFilter,
} from '../redux/slices/filterSlice'
import { fetchPizzas, selectPizzaData } from '../redux/slices/pizzaSlice'
import { useAppDispatch } from '../redux/store'
// In project imports

import Sort from '../components/Sort'
import Categories from '../components/Categories'
import PizzaBlock from '../components/PizzaBlock'
import Pagination from '../components/Pagination'
import Skeleton from '../components/PizzaBlock/Skeleton'
// Components import

const Home: React.FC = () => {
  const navigate = useNavigate()
  const dispatch = useAppDispatch()
  const isSearch = useRef(false)
  const isMounted = useRef(false)
  const urlRef = useRef(window.location.search)
  // const [currentPage, setCurrentPage] = useState(1)
  // const [categoryId, setCategoryId] = useState(0)
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ —ç—Ç–æ –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ State
  const { items, status } = useSelector(selectPizzaData)
  const { categoryId, selectedSort, currentPage, searchValue } =
    useSelector(selectFilter)

  // const [selectedSort, setSelectedSort] = useState({
  //   name: '–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ ‚òù',
  //   sortProperty: 'rating',
  //   order: 'asc',
  //   sortType: 'rating-asc',
  // })
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ —ç—Ç–æ –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ State

  // –ü–µ—Ä–µ–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ Redux –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const onChangeCategory = React.useCallback((idx: number) => {
    dispatch(setCategoryId(idx))
  }, [])

  // Fetch (Axios) –∑–∞–ø—Ä–æ—Å
  const getPizzas = async () => {
    const categoryRequest = categoryId > 0 ? `category=${categoryId}` : ''
    const sortRequest = selectedSort.sortProperty
    const orderRequest = !selectedSort.order ? `desc` : `${selectedSort.order}`
    const searchRequest = searchValue ? `&search=${searchValue}` : ''

    dispatch(
      fetchPizzas({
        categoryRequest,
        sortRequest,
        orderRequest,
        searchRequest,
        currentPage,
      })
    )
    window.scrollTo(0, 0)
  }

  // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞ –∏—Å—Ö–æ–¥—è –∏–∑ Redux –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify(
        {
          sortProperty: selectedSort.sortProperty,
          sortType: selectedSort.sortType,
          categoryId,
          currentPage,
        },
        { addQueryPrefix: true }
      )

      navigate(queryString)
    }
    isMounted.current = true
  }, [categoryId, selectedSort, currentPage])

  // –ï—Å–ª–∏ –±—ã–ª —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redux
  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1))

      const selectedSort = listItems.find(
        (obj) => obj.sortType === params.sortType
      )

      if (selectedSort) {
        dispatch(
          setFilters({
            ...params,
            selectedSort,
            // searchValue, categoryId –∏ currentPage –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑-–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π SortType
            searchValue,
            categoryId,
            currentPage,
          })
        )
      }

      isSearch.current = true
    }
  }, [urlRef.current])

  // –ï—Å–ª–∏ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, —Ç–æ Fetch (Axios) –∑–∞–ø—Ä–æ—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    window.scrollTo(0, 0)

    if (!isSearch.current) {
      getPizzas()
    }

    isSearch.current = false
  }, [categoryId, selectedSort, searchValue, currentPage])

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –±–ª–æ–∫–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Ç–æ –ø–∏—Ü—Ü—ã
  const skeleton = [...new Array(4)].map((_, index) => <Skeleton key={index} />)
  const pizzas = items.map((obj: any) => <PizzaBlock key={obj.id} {...obj} />)

  return (
    <div className="container">
      <div className="content__top">
        <Categories
          categoryId={categoryId}
          onChangeCategory={onChangeCategory}
        />
        <Sort />
      </div>

      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === 'error' ? (
        <div className="content__error-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
          <p>
            –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            –ø–æ–∑–∂–µ.
          </p>
        </div>
      ) : (
        <div className="content__items">
          {status === 'loading' ? skeleton : pizzas}
        </div>
      )}

      <Pagination />
    </div>
  )
}

export default Home
